#!/usr/bin/env python3
# SPDX-License-Identifier: MIT OR Apache-2.0
# SPDX-FileCopyrightText: The Ferrocene Developers

# This script generates the contents of a simple GitHub Pages site containing
# the documentation for the current commit, plus other reports generated by CI
# for that commit. This is not meant to be customer-facing, it's just a simple
# small internal thing to help our developers view the current state of things.

import os
import subprocess
import tempfile
import tomli


ARTIFACTS_PREFIX = "s3://ferrocene-ci-artifacts/ferrocene/dist"
ONLY_SUBSETS = {"default"}


def main():
    output = tempfile.mkdtemp()
    commit = cmd("git", "rev-parse", "HEAD", stdout=True).strip()

    with tempfile.TemporaryDirectory() as download_dir:
        for tarball, directory_inside in get_docs_tarballs():
            cmd(
                "aws",
                "s3",
                "cp",
                f"{ARTIFACTS_PREFIX}/{commit}/{tarball}",
                f"{download_dir}/{tarball}",
            )
            cmd(
                "tar",
                "xJf",
                f"{download_dir}/{tarball}",
                "-C",
                output,
                "--strip-components",
                str(directory_inside.count("/") + 1),
                directory_inside,
            )

    generate_redirect(
        output,
        "traceability-matrix-x86_64-unknown-linux-gnu.html",
        "/qualification/traceability-matrix.html",
    )

    with open(os.environ["GITHUB_OUTPUT"], "a") as f:
        f.write(f"dir={output}\n")


def generate_redirect(output, src, dest):
    with open(f"{output}/{src}", "w") as f:
        f.write(
            f'<!DOCTYPE html>\n<meta charset="utf-8">\n<script>location.pathname = "{dest}";</script>\n'
        )


def get_docs_tarballs():
    with open("ferrocene/packages.toml", "rb") as f:
        packages = tomli.load(f)

    for group in packages["groups"].values():
        for package in group["packages"]:
            try:
                docs_in = package["docs-in"]
            except KeyError:
                continue
            if package["subset"] not in ONLY_SUBSETS:
                continue

            if "*" not in group["targets"]:
                raise RuntimeError("target-specific docs not supported")
            yield f"{package['name']}-nightly.tar.xz", f"{package['name']}-nightly/{package['name']}/{docs_in}"


def cmd(*args, stdout=False):
    options = {}
    if stdout:
        options["stdout"] = subprocess.PIPE
        options["text"] = True

    result = subprocess.run(args, check=True, **options)
    if stdout:
        return result.stdout


if __name__ == "__main__":
    main()
